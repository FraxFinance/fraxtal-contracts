"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const hardhat_1 = __importStar(require("hardhat"));
require("@nomiclabs/hardhat-ethers");
const constants_1 = require("@ethersproject/constants");
const units_1 = require("@ethersproject/units");
const abi_1 = require("@ethersproject/abi");
const setup_1 = require("../utils/setup");
const execution_1 = require("../../src/utils/execution");
describe("Safe", async () => {
    const [user1, user2] = hardhat_1.waffle.provider.getWallets();
    const setupTests = hardhat_1.deployments.createFixture(async ({ deployments }) => {
        await deployments.fixture();
        const handler = await (0, setup_1.getCompatFallbackHandler)();
        const ownerSafe = await (0, setup_1.getSafeWithOwners)([user1.address, user2.address], 2, handler.address);
        const messageHandler = handler.attach(ownerSafe.address);
        return {
            safe: await (0, setup_1.getSafeWithOwners)([ownerSafe.address, user1.address], 1),
            ownerSafe,
            messageHandler,
        };
    });
    describe("0xExploit", async () => {
        /*
         * In case of 0x it was possible to use EIP-1271 (contract signatures) to generate a valid signature for EOA accounts.
         * See https://samczsun.com/the-0x-vulnerability-explained/
         */
        it("should not be able to use EIP-1271 (contract signatures) for EOA", async () => {
            const { safe, ownerSafe, messageHandler } = await setupTests();
            // Safe should be empty again
            await user1.sendTransaction({ to: safe.address, value: (0, units_1.parseEther)("1") });
            await (0, chai_1.expect)(await hardhat_1.default.ethers.provider.getBalance(safe.address)).to.be.deep.eq((0, units_1.parseEther)("1"));
            const operation = 0;
            const to = user1.address;
            const value = (0, units_1.parseEther)("1");
            const data = "0x";
            const nonce = await safe.nonce();
            // Use off-chain Safe signature
            const messageData = await safe.encodeTransactionData(to, value, data, operation, 0, 0, 0, constants_1.AddressZero, constants_1.AddressZero, nonce);
            const messageHash = await messageHandler.getMessageHash(messageData);
            const ownerSigs = await (0, execution_1.buildSignatureBytes)([await (0, execution_1.signHash)(user1, messageHash), await (0, execution_1.signHash)(user2, messageHash)]);
            const encodedOwnerSigns = abi_1.defaultAbiCoder.encode(["bytes"], [ownerSigs]).slice(66);
            // Use EOA owner
            let sigs = "0x" +
                "000000000000000000000000" +
                user2.address.slice(2) +
                "0000000000000000000000000000000000000000000000000000000000000041" +
                "00" + // r, s, v
                encodedOwnerSigns;
            // Transaction should fail (invalid signatures should revert the Ethereum transaction)
            await (0, chai_1.expect)(safe.execTransaction(to, value, data, operation, 0, 0, 0, constants_1.AddressZero, constants_1.AddressZero, sigs), "Transaction should fail if invalid signature is provided").to.be.reverted;
            await (0, chai_1.expect)(await hardhat_1.default.ethers.provider.getBalance(safe.address)).to.be.deep.eq((0, units_1.parseEther)("1"));
            // Use Safe owner
            sigs =
                "0x" +
                    "000000000000000000000000" +
                    ownerSafe.address.slice(2) +
                    "0000000000000000000000000000000000000000000000000000000000000041" +
                    "00" + // r, s, v
                    encodedOwnerSigns;
            await safe.execTransaction(to, value, data, operation, 0, 0, 0, constants_1.AddressZero, constants_1.AddressZero, sigs);
            // Safe should be empty again
            await (0, chai_1.expect)(await hardhat_1.default.ethers.provider.getBalance(safe.address)).to.be.deep.eq((0, units_1.parseEther)("0"));
        });
        it("should revert if EIP-1271 check changes state", async () => {
            const { safe, ownerSafe, messageHandler } = await setupTests();
            // Test Validator
            const source = `
            contract Test {
                bool public changeState;
                uint256 public nonce;
                function isValidSignature(bytes memory _data, bytes memory _signature) public returns (bytes4) {
                    if (changeState) {
                        nonce = nonce + 1;
                    }
                    return 0x20c13b0b;
                }
    
                function shouldChangeState(bool value) public {
                    changeState = value;
                }
            }`;
            const testValidator = await (0, setup_1.deployContract)(user1, source);
            await testValidator.shouldChangeState(true);
            await (0, execution_1.executeContractCallWithSigners)(safe, safe, "addOwnerWithThreshold", [testValidator.address, 1], [user1]);
            await (0, chai_1.expect)(await safe.getOwners()).to.be.deep.eq([testValidator.address, ownerSafe.address, user1.address]);
            // Deposit 1 ETH + some spare money for execution
            await user1.sendTransaction({ to: safe.address, value: (0, units_1.parseEther)("1") });
            await (0, chai_1.expect)(await hardhat_1.default.ethers.provider.getBalance(safe.address)).to.be.deep.eq((0, units_1.parseEther)("1"));
            const operation = 0;
            const to = user1.address;
            const value = (0, units_1.parseEther)("1");
            const data = "0x";
            const nonce = await safe.nonce();
            // Use off-chain Safe signature
            const messageData = await safe.encodeTransactionData(to, value, data, operation, 0, 0, 0, constants_1.AddressZero, constants_1.AddressZero, nonce);
            const messageHash = await messageHandler.getMessageHash(messageData);
            const ownerSigs = await (0, execution_1.buildSignatureBytes)([await (0, execution_1.signHash)(user1, messageHash), await (0, execution_1.signHash)(user2, messageHash)]);
            const encodedOwnerSigns = abi_1.defaultAbiCoder.encode(["bytes"], [ownerSigs]).slice(66);
            // Use Safe owner
            const sigs = "0x" +
                "000000000000000000000000" +
                testValidator.address.slice(2) +
                "0000000000000000000000000000000000000000000000000000000000000041" +
                "00" + // r, s, v
                encodedOwnerSigns;
            // Transaction should fail (state changing signature check should revert)
            await (0, chai_1.expect)(safe.execTransaction(to, value, data, operation, 0, 0, 0, constants_1.AddressZero, constants_1.AddressZero, sigs), "Transaction should fail if invalid signature is provided").to.be.reverted;
            await (0, chai_1.expect)(await hardhat_1.default.ethers.provider.getBalance(safe.address)).to.be.deep.eq((0, units_1.parseEther)("1"));
            await testValidator.shouldChangeState(false);
            await safe.execTransaction(to, value, data, operation, 0, 0, 0, constants_1.AddressZero, constants_1.AddressZero, sigs);
            // Safe should be empty again
            await (0, chai_1.expect)(await hardhat_1.default.ethers.provider.getBalance(safe.address)).to.be.deep.eq((0, units_1.parseEther)("0"));
        });
    });
});
