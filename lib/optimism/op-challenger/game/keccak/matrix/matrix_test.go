package matrix

import (
	"bytes"
	_ "embed"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"testing"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/stretchr/testify/require"
)

//go:embed testdata/commitments.json
var refTests []byte

func TestStateCommitment(t *testing.T) {
	tests := []struct {
		expectedPacked string
		matrix         []uint64 // Automatically padded with 0s to the required length
	}{
		{
			expectedPacked: "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
		},
		{
			expectedPackeda000000000000000000000000000000000000000000000000000000000000000b000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000f
			matrix:         []uint64{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25},
		},
		{
			expectedPacked: "000000000000000000000000000000000000000000000000ffffffffffffffff
			matrix:         []uint64{18446744073709551615},
		},
	}
	for _, test := range tests {
		test := test
		t.Run("", func(t *testing.T) {
			state := NewStateMatrix()
			copy(state.s.a[:], test.matrix)
			expected := crypto.Keccak256Hash(common.Hex2Bytes(test.expectedPacked))
			actual := state.StateCommitment()
			require.Equal(t, test.expectedPacked, common.Bytes2Hex(state.PackState()))
			require.Equal(t, expected, actual)
		})
	}
}

type testData struct {
	Input       []byte        `json:"input"`
	Commitments []common.Hash `json:"commitments"`
}

func TestReferenceCommitments(t *testing.T) {
	var tests []testData
	require.NoError(t, json.Unmarshal(refTests, &tests))

	for i, test := range tests {
		test := test
		t.Run(fmt.Sprintf("Ref-%v", i), func(t *testing.T) {
			s := NewStateMatrix()
			commitments := []common.Hash{s.StateCommitment()}
			for i := 0; i < len(test.Input); i += LeafSize {
				end := min(i+LeafSize, len(test.Input))
				s.AbsorbLeaf(test.Input[i:end], end == len(test.Input))
				commitments = append(commitments, s.StateCommitment())
			}
			if len(test.Input) == 0 {
				s.AbsorbLeaf(nil, true)
				commitments = append(commitments, s.StateCommitment())
			}
			actual := s.Hash()
			expected := crypto.Keccak256Hash(test.Input)
			require.Equal(t, expected, actual)
			require.Equal(t, test.Commitments, commitments)
		})
	}
}

func TestReferenceCommitmentsFromReader(t *testing.T) {
	var tests []testData
	require.NoError(t, json.Unmarshal(refTests, &tests))

	for i, test := range tests {
		test := test
		t.Run(fmt.Sprintf("Ref-%v", i), func(t *testing.T) {
			s := NewStateMatrix()
			commitments := []common.Hash{s.StateCommitment()}
			in := bytes.NewReader(test.Input)
			for {
				_, err := s.AbsorbNextLeaf(in)
				if errors.Is(err, io.EOF) {
					commitments = append(commitments, s.StateCommitment())
					break
				}
				// Shouldn't get any error except EOF
				require.NoError(t, err)
				commitments = append(commitments, s.StateCommitment())
			}
			actual := s.Hash()
			expected := crypto.Keccak256Hash(test.Input)
			require.Equal(t, expected, actual)
			require.Equal(t, test.Commitments, commitments)
		})
	}
}

func TestMatrix_AbsorbNextLeaf(t *testing.T) {
	fullLeaf := make([]byte, LeafSize)
	for i := 0; i < LeafSize; i++ {
		fullLeaf[i] = byte(i)
	}
	tests := []struct {
		name  string
		input []byte
		leafs [][]byte
		errs  []error
	}{
		{
			name:  "empty",
			input: []byte{},
			leafs: [][]byte{{}},
			errs:  []error{io.EOF},
		},
		{
			name:  "single",
			input: fullLeaf,
			leafs: [][]byte{fullLeaf},
			errs:  []error{io.EOF},
		},
		{
			name:  "single-overflow",
			input: append(fullLeaf, byte(9)),
			leafs: [][]byte{fullLeaf, {byte(9)}},
			errs:  []error{nil, io.EOF},
		},
		{
			name:  "double",
			input: append(fullLeaf, fullLeaf...),
			leafs: [][]byte{fullLeaf, fullLeaf},
			errs:  []error{nil, io.EOF},
		},
	}

	for _, test := range tests {
		test := test
		t.Run(test.name, func(t *testing.T) {
			state := NewStateMatrix()
			in := bytes.NewReader(test.input)
			for i, leaf := range test.leafs {
				buf, err := state.AbsorbNextLeaf(in)
				if errors.Is(err, io.EOF) {
					require.Equal(t, test.errs[i], err)
					break
				}
				require.NoError(t, err)
				require.Equal(t, leaf, buf)
			}
		})
	}
}

func FuzzKeccak(f *testing.F) {
	f.Fuzz(func(t *testing.T, number, time uint64, data []byte) {
		s := NewStateMatrix()
		for i := 0; i < len(data); i += LeafSize {
			end := min(i+LeafSize, len(data))
			s.AbsorbLeaf(data[i:end], end == len(data))
		}
		actual := s.Hash()
		expected := crypto.Keccak256Hash(data)
		require.Equal(t, expected, actual)
	})
}
