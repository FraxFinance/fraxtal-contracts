// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

import { MockERC20Owned } from "src/contracts/Fraxtal/universal/vanity/MockERC20Owned.sol";
// import { DisputeGameFactory } from "@eth-optimism/contracts-bedrock/src/dispute/DisputeGameFactory.sol";
import { ERC20 } from "@openzeppelin-4/contracts/token/ERC20/ERC20.sol";
import { FFIInterface } from "@eth-optimism/contracts-bedrock/test/setup/FFIInterface.sol";
import { FraxTest } from "frax-std/FraxTest.sol";
import { FraxtalPortal2 } from "src/contracts/Fraxtal/L1/FraxtalPortal2.sol";
import {
    GameType,
    GameTypes,
    OutputRoot,
    Claim,
    GameStatus,
    Hash
} from "@eth-optimism/contracts-bedrock/src/dispute/lib/Types.sol";
import { GasToken } from "src/contracts/Fraxtal/interfaces/GasToken.sol";
import { Encoding } from "@eth-optimism/contracts-bedrock/src/libraries/Encoding.sol";
import { Hashing } from "@eth-optimism/contracts-bedrock/src/libraries/Hashing.sol";
import {
    ICrossDomainMessenger
} from "@eth-optimism/contracts-bedrock/src/universal/interfaces/ICrossDomainMessenger.sol";
// import { IDisputeGameFactory } from "@eth-optimism/contracts-bedrock/src/dispute/interfaces/IDisputeGameFactory.sol";
import { IERC20 } from "@openzeppelin-4/contracts/token/ERC20/IERC20.sol";
import { IFaultDisputeGame } from "@eth-optimism/contracts-bedrock/src/dispute/interfaces/IFaultDisputeGame.sol";
import { IOptimismPortal } from "@eth-optimism/contracts-bedrock/src/L1/interfaces/IOptimismPortal.sol";
import { IProxyAdmin } from "@eth-optimism/contracts-bedrock/src/universal/interfaces/IProxyAdmin.sol";
import { IResourceMetering } from "@eth-optimism/contracts-bedrock/src/L1/interfaces/IResourceMetering.sol";
import { ISuperchainConfig } from "@eth-optimism/contracts-bedrock/src/L1/interfaces/ISuperchainConfig.sol";
import { ISystemConfig } from "@eth-optimism/contracts-bedrock/src/L1/interfaces/ISystemConfig.sol";
import { L1Block } from "@eth-optimism/contracts-bedrock/src/L2/L1Block.sol";
import { L1CrossDomainMessenger } from "@eth-optimism/contracts-bedrock/src/L1/L1CrossDomainMessenger.sol";
import { L2CrossDomainMessenger } from "@eth-optimism/contracts-bedrock/src/L2/L2CrossDomainMessenger.sol";
import { L1CrossDomainMessengerCGT } from "src/contracts/Fraxtal/L1/L1CrossDomainMessengerCGT.sol";
import { L1StandardBridge } from "@eth-optimism/contracts-bedrock/src/L1/L1StandardBridge.sol";
import { L1StandardBridgeCGT } from "src/contracts/Fraxtal/L1/L1StandardBridgeCGT.sol";
import { L2StandardBridge } from "@eth-optimism/contracts-bedrock/src/L2/L2StandardBridge.sol";
import { L2ToL1MessagePasser } from "@eth-optimism/contracts-bedrock/src/L2/L2ToL1MessagePasser.sol";
import { L2OutputOracle } from "@eth-optimism/contracts-bedrock/src/L1/L2OutputOracle.sol";
import { LegacyMintableERC20 } from "@eth-optimism/contracts-bedrock/src/legacy/LegacyMintableERC20.sol";
import { OptimismMintableERC20 } from "@eth-optimism/contracts-bedrock/src/universal/OptimismMintableERC20.sol";
import {
    OptimismMintableERC20Factory
} from "@eth-optimism/contracts-bedrock/src/universal/OptimismMintableERC20Factory.sol";
import { OptimismPortal } from "@eth-optimism/contracts-bedrock/src/L1/OptimismPortal.sol";
import { PermissionedDisputeGame } from "@eth-optimism/contracts-bedrock/src/dispute/PermissionedDisputeGame.sol";
import { Predeploys } from "@eth-optimism/contracts-bedrock/src/libraries/Predeploys.sol";
import { Proxy } from "@eth-optimism/contracts-bedrock/src/universal/Proxy.sol";
import { ProxyAdmin } from "@eth-optimism/contracts-bedrock/src/universal/ProxyAdmin.sol";
import { Script } from "forge-std/Script.sol";
import { SigUtils } from "src/test/Fraxtal/utils/SigUtils.sol";
import { Storage } from "src/script/Fraxtal/testnet/Storage.sol";
import { StorageSetterRestricted } from "src/script/Fraxtal/testnet/StorageSetterRestricted.sol";
import { SystemConfig } from "@eth-optimism/contracts-bedrock/src/L1/SystemConfig.sol";
import { Types } from "@eth-optimism/contracts-bedrock/src/libraries/Types.sol";
import { console } from "frax-std/FraxTest.sol";
import { deployProxyAndInitialize } from "src/script/Fraxtal/DeployProxyAndInitialize.s.sol";
import "src/Constants.sol" as Constants;

contract UpgradeDevnetCGT is Script {
    // Fraxtal-specific
    // =========================================
    GasToken public FXS;
    SigUtils public sigUtils_FXS;
    ProxyAdmin public proxyAdmin;
    address public proxyAdminOwner;

    // SystemConfig (proxy)
    ISystemConfig public systemConfig;

    // SuperchainConfig (proxy)
    ISuperchainConfig public superchainConfig;

    // Superchain ProxyAdmin
    IProxyAdmin public superchainProxyAdmin;

    // OptimismPortal FraxtalPortal2
    Proxy public optimismPortalPxy;
    address payable public optimismPortalPxyAddress;
    FraxtalPortal2 public fraxtalPortal2;

    // OptimismMintableERC20Factory (proxy)
    OptimismMintableERC20Factory public l1OptimismMintableERC20Factory;
    OptimismMintableERC20Factory public l2OptimismMintableERC20Factory;

    // L1CrossDomainMessenger
    Proxy public messengerPxy;
    address payable public messengerPxyAddress;

    // L1StandardBridge
    Proxy public bridgePxy;
    address payable public bridgePxyAddress;
    L1StandardBridgeCGT public l1StandardBridgeCGT;

    // L2toL1MessagePasser (proxy)
    L2ToL1MessagePasser public l2ToL1MessagePasser;

    // L2StandardBridge (proxy)
    L2StandardBridge public l2StandardBridge;

    // L2CrossDomainMessenger (proxy)
    L2CrossDomainMessenger public l2CrossDomainMessenger;

    // L1Block (proxy)
    L1Block public l1Block;

    // // DisputeGameFactory
    // Proxy public disputeGameFactoryPxy;
    // address payable public disputeGameFactoryPxyAddress;
    // DisputeGameFactory public disputeGameFactory;

    // PermissionedDisputeGame
    PermissionedDisputeGame public gameImpl;
    address public permissionedDisputeGameImplAddress;
    address public disputeGameProposer;

    // Test "normal" ERC20s
    MockERC20Owned public L1Token;
    OptimismMintableERC20 public BadL1Token;
    OptimismMintableERC20 public L2Token;
    LegacyMintableERC20 public LegacyL2Token;
    MockERC20Owned public NativeL2Token;
    OptimismMintableERC20 public BadL2Token;
    OptimismMintableERC20 public RemoteL1Token;

    string public mnemonic = "test test test test test test test test test test test junk";

    // Check https://github.com/ethereum-optimism/optimism/blob/6a871c54512ebdb749f46ccb7d27b1b60510eba1/op-deployer/pkg/deployer/init.go#L112 for logic
    uint256 public gameProposerPk = vm.deriveKey(mnemonic, "m/44'/60'/2'/2151908/", 1);
    uint256 public l1ProxyAdminOwnerPk = vm.deriveKey(mnemonic, "m/44'/60'/2'/2151908/", 6);
    uint256 public l2ProxyAdminOpSysOwnerPk = vm.deriveKey(mnemonic, "m/44'/60'/2'/2151908/", 5);
    uint256 public systemConfigOwnerPk = vm.deriveKey(mnemonic, "m/44'/60'/2'/2151908/", 10);
    address public testerAddress = vm.envAddress("PK_ADDRESS");

    function setUp() public virtual {
        // Instantiate the SystemConfig
        systemConfig = ISystemConfig(0x25c7cCe7d8beE27EF18a282154a5a312b53C9BBA);

        // Instantiate the SystemConfig (proxy)
        superchainConfig = ISuperchainConfig(0x91BF7398aFc3d2691aA23799fdb9175EE2EB6105);

        // Instantiate the Superchain ProxyAdmin
        superchainProxyAdmin = IProxyAdmin(0x4bF8D2E79E33cfd5a8348737CA91bE5F65Ea7dd9);

        // Instantiate the ProxyAdmin
        proxyAdmin = ProxyAdmin(0xfcb316bD1F7cea57e7E2ef62b8F3dDfB76e5F524);
        proxyAdminOwner = 0x39Dc844B8b461c6de6c572cad9585d9f5A8DEa6A; // From deploy script

        // Instantiate the original OptimismPortal
        optimismPortalPxyAddress = payable(0xD943EF21D6Af93DDF42a5cc91Ca46D7dA8582339);
        optimismPortalPxy = Proxy(optimismPortalPxyAddress);
        fraxtalPortal2 = FraxtalPortal2(optimismPortalPxyAddress);

        // Instantiate the original L1CrossDomainMessenger
        messengerPxyAddress = payable(0x0282B6304d977c5b39AF565e90C34fBd0D1bB718);
        messengerPxy = Proxy(messengerPxyAddress);

        // Instantiate the original L1StandardBridge
        bridgePxyAddress = payable(0x1A931DAFC3E9FEfc9E2e5943D8B226bf6043234B);
        bridgePxy = Proxy(bridgePxyAddress);
        l1StandardBridgeCGT = l1StandardBridgeCGT = L1StandardBridgeCGT(payable(bridgePxy));

        // Instantiate the original OptimismMintableERC20Factorys
        l1OptimismMintableERC20Factory = OptimismMintableERC20Factory(systemConfig.optimismMintableERC20Factory());

        // Instantiate FXS (Gas Paying Token)
        (address gasTokenAddr, ) = systemConfig.gasPayingToken();
        FXS = GasToken(gasTokenAddr);

        // // Instantiate DisputeGameFactory and PermissionedDisputeGame
        // disputeGameFactoryPxyAddress = payable(address(systemConfig.disputeGameFactory()));
        // disputeGameFactoryPxy = Proxy(disputeGameFactoryPxyAddress);
        // disputeGameFactory = DisputeGameFactory(disputeGameFactoryPxyAddress);
        // permissionedDisputeGameImplAddress = address(
        //     DisputeGameFactory(disputeGameFactoryPxyAddress).gameImpls(GameTypes.PERMISSIONED_CANNON)
        // );
        // gameImpl = PermissionedDisputeGame(permissionedDisputeGameImplAddress);
        // disputeGameProposer = gameImpl.proposer();

        // L2 stuff
        l2ToL1MessagePasser = L2ToL1MessagePasser(payable(Predeploys.L2_TO_L1_MESSAGE_PASSER));
        l2StandardBridge = L2StandardBridge(payable(Predeploys.L2_STANDARD_BRIDGE));
        l2OptimismMintableERC20Factory = OptimismMintableERC20Factory(
            payable(Predeploys.OPTIMISM_MINTABLE_ERC20_FACTORY)
        );
        l2CrossDomainMessenger = L2CrossDomainMessenger(Predeploys.L2_CROSS_DOMAIN_MESSENGER);
        l1Block = L1Block(Predeploys.L1_BLOCK_ATTRIBUTES);

        // // Test tokens
        // ========== ON L1 ==========
        L1Token = MockERC20Owned(Constants.FraxtalL1Devnet.L1TOKEN);
        BadL1Token = OptimismMintableERC20(Constants.FraxtalL1Devnet.BADL1TOKEN);
        RemoteL1Token = OptimismMintableERC20(Constants.FraxtalL1Devnet.REMOTEL1TOKEN);
        // ========== ON L2 ==========
        L2Token = OptimismMintableERC20(Constants.FraxtalL2Devnet.L2TOKEN);
        BadL2Token = OptimismMintableERC20(Constants.FraxtalL2Devnet.BADL2TOKEN);
        LegacyL2Token = LegacyMintableERC20(Constants.FraxtalL2Devnet.LEGACYL2TOKEN);
        NativeL2Token = MockERC20Owned(Constants.FraxtalL2Devnet.NATIVEL2TOKEN);

        vm.makePersistent(address(L1Token));
        vm.makePersistent(address(BadL1Token));
        vm.makePersistent(address(RemoteL1Token));
        vm.makePersistent(address(LegacyL2Token));
        vm.makePersistent(address(L2Token));
        vm.makePersistent(address(BadL2Token));
        vm.makePersistent(address(NativeL2Token));

        // Label
        vm.label(address(L1Token), "L1Token");
        vm.label(address(BadL1Token), "BadL1Token");
        vm.label(address(RemoteL1Token), "RemoteL1Token");
        vm.label(address(LegacyL2Token), "LegacyL2Token");
        vm.label(address(L2Token), "L2Token");
        vm.label(address(BadL2Token), "BadL2Token");
        vm.label(address(NativeL2Token), "NativeL2Token");

        // Check the starting versions of the tokens above to make sure
        checkStartingL1Versions();
        checkStartingL2Versions();
    }

    function checkStartingL1Versions() public {
        // TODO. Copy from LiveMainetCGTUpgradeBaseTest
        // assert(L1CrossDomainMessenger(messengerPxy).version(), "2.2.0", "Wrong L1 L1CrossDomainMessenger version");
    }

    function checkStartingL2Versions() public {
        // TODO. Copy from LiveMainetCGTUpgradeBaseTest;
    }

    function run() public virtual {
        // Check starting versions
        checkStartingL1Versions();
        checkStartingL2Versions();

        // Start broadcasting
        vm.startBroadcast(l1ProxyAdminOwnerPk);
        console.log("Executing as", vm.addr(l1ProxyAdminOwnerPk));

        // Upgrade OptimismPortal to FraxtalPortal2
        // ============================================

        // Deploy the impl for FraxtalPortal2
        FraxtalPortal2 fp2Impl = new FraxtalPortal2(604_800, 302_400);
        fraxtalPortal2 = FraxtalPortal2(optimismPortalPxyAddress);

        // ProxyAdmin upgradeToAndCall route
        {
            // First need to clear out the _initialized slot (slot #0) for the existing OptimismPortal using this StorageSetterRestricted trick
            // Otherwise it would revert as already being initialized
            StorageSetterRestricted storageSetter = new StorageSetterRestricted();
            console.log("FraxtalPortal2 StorageSetterRestricted deployed at", address(storageSetter));

            // Upgrade and clear initialization
            proxyAdmin.upgradeAndCall(
                optimismPortalPxyAddress,
                address(storageSetter),
                abi.encodeWithSignature("clearSlotZero()")
            );

            uint256 initializedValue = StorageSetterRestricted(address(optimismPortalPxyAddress)).getUint(0);
            console.log("Cleared OptimismPortal initialized flag, new value", initializedValue);

            // Prepare initialization call
            bytes memory data = abi.encodeCall(
                fp2Impl.initialize,
                (
                    IDisputeGameFactory(0xb38B16e0539b5ac342CE642E0d503412Ef82D81A),
                    systemConfig,
                    superchainConfig,
                    GameTypes.PERMISSIONED_CANNON, // TODO: should be CANNON or PERMISSIONED_CANNON here in prod
                    address(0) // TODO: should be frxETH here in prod
                )
            );

            // Upgrade the OptimismPortal Proxy to use the FraxtalPortal2 implementation
            proxyAdmin.upgradeAndCall(optimismPortalPxyAddress, address(fp2Impl), data);
        }

        // Upgrade L1CrossDomainMessenger
        // ============================================
        // Deploy the impl for L1CrossDomainMessengerCGT
        L1CrossDomainMessengerCGT l1MessengerCGTImpl = new L1CrossDomainMessengerCGT();

        // ProxyAdmin upgradeToAndCall route
        {
            // First need to clear out the _initialized slot (slot #0) for the existing L1CrossDomainMessenger using this StorageSetterRestricted trick
            // Otherwise it would revert as already being initialized
            StorageSetterRestricted storageSetter = new StorageSetterRestricted();
            console.log("L1CrossDomainMessengerCGT StorageSetterRestricted deployed at", address(storageSetter));

            // Upgrade and clear initialization
            proxyAdmin.upgradeAndCall(
                messengerPxyAddress,
                address(storageSetter),
                abi.encodeWithSignature("clearSlotZero()")
            );

            uint256 initializedValue = StorageSetterRestricted(address(messengerPxyAddress)).getUint(0);
            console.log("Cleared L1CrossDomainMessenger initialized flag, new value", initializedValue);

            // Prepare initialization call
            bytes memory data = abi.encodeCall(
                l1MessengerCGTImpl.initialize,
                (superchainConfig, IOptimismPortal(optimismPortalPxyAddress), systemConfig)
            );

            // Upgrade the L1CrossDomainMessenger Proxy to use the L1CrossDomainMessengerCGT implementation
            proxyAdmin.upgradeAndCall(messengerPxyAddress, address(l1MessengerCGTImpl), data);
        }

        // Upgrade L1StandardBridge
        // ============================================
        // Deploy the impl for L1StandardBridgeCGT
        L1StandardBridgeCGT bridgeCGTImpl = new L1StandardBridgeCGT();

        // ProxyAdmin upgradeToAndCall route
        {
            // First need to clear out the _initialized slot (slot #0) for the existing L1StandardBridge using this StorageSetterRestricted trick
            // Otherwise it would revert as already being initialized
            StorageSetterRestricted storageSetter = new StorageSetterRestricted();
            console.log("L1StandardBridgeCGT StorageSetterRestricted deployed at", address(storageSetter));

            // Upgrade and clear initialization
            proxyAdmin.upgradeAndCall(
                bridgePxyAddress,
                address(storageSetter),
                abi.encodeWithSignature("clearSlotZero()")
            );

            uint256 initializedValue = StorageSetterRestricted(address(bridgePxyAddress)).getUint(0);
            console.log("Cleared L1StandardBridgeCGT initialized flag, new value", initializedValue);

            // Prepare initialization call
            bytes memory data = abi.encodeCall(
                bridgeCGTImpl.initialize,
                (
                    ICrossDomainMessenger(messengerPxyAddress),
                    superchainConfig,
                    systemConfig,
                    address(0),
                    address(0),
                    address(0)
                )
            );

            // Upgrade the L1StandardBridgeCGT Proxy to use the L1StandardBridgeCGTFxtl implementation
            proxyAdmin.upgradeAndCall(bridgePxyAddress, address(bridgeCGTImpl), data);
        }

        vm.stopBroadcast();
    }

    function ffiGetProveWithdrawalTransactionInputs(
        Types.WithdrawalTransaction memory _tx
    ) public returns (bytes32, bytes32, bytes32, bytes32, bytes[] memory) {
        string[] memory cmds = new string[](8);
        cmds[0] = "./scripts/go/bin/differential-testing";
        cmds[1] = "getProveWithdrawalTransactionInputs";
        cmds[2] = vm.toString(_tx.nonce);
        cmds[3] = vm.toString(_tx.sender);
        cmds[4] = vm.toString(_tx.target);
        cmds[5] = vm.toString(_tx.value);
        cmds[6] = vm.toString(_tx.gasLimit);
        cmds[7] = vm.toString(_tx.data);

        // Example
        // go ./scripts/go/differential-testing.go 0 0xe05fcC23807536bEe418f142D19fa0d21BB0cfF7 0x0376AAc07Ad725E01357B1725B5ceC61aE10473c 100 100000 0x

        bytes memory result = vm.ffi(cmds);
        (
            bytes32 stateRoot,
            bytes32 storageRoot,
            bytes32 outputRoot,
            bytes32 withdrawalHash,
            bytes[] memory withdrawalProof
        ) = abi.decode(result, (bytes32, bytes32, bytes32, bytes32, bytes[]));

        return (stateRoot, storageRoot, outputRoot, withdrawalHash, withdrawalProof);
    }
}
