// SPDX-License-Identifier: ISC
pragma solidity ^0.8.0;

import { BaseScript } from "frax-std/BaseScript.sol";
import { console } from "frax-std/FraxTest.sol";
import { FraxchainPortal } from "src/contracts/Fraxtal/L1/FraxchainPortal.sol";
import { L2OutputOracle } from "@eth-optimism/contracts-bedrock/contracts/L1/L2OutputOracle.sol";
import { MintableBurnableTestERC20 } from "../test/helpers/MintableBurnableTestERC20.sol";
import { ResourceMetering } from "@eth-optimism/contracts-bedrock/contracts/L1/ResourceMetering.sol";
import { SystemConfig } from "@eth-optimism/contracts-bedrock/contracts/L1/SystemConfig.sol";
import { VestedFXS } from "src/contracts/VestedFXS-and-Flox/VestedFXS/VestedFXS.sol";
import { VestedFXSUtils } from "src/contracts/VestedFXS-and-Flox/VestedFXS/VestedFXSUtils.sol";
import "src/Constants.sol" as Constants;

function deployFraxchainPortal(
    L2OutputOracle _l2Oracle,
    SystemConfig _systemConfig
) returns (FraxchainPortal _fraxchainPortal) {
    _fraxchainPortal = new FraxchainPortal({
        _l2Oracle: _l2Oracle,
        _guardian: Constants.Mainnet.AMO_OWNER,
        _frxETH: Constants.Mainnet.FRXETH_ERC20,
        _frxETHMinter: Constants.Mainnet.FRXETH_MINTER,
        _paused: false,
        _config: _systemConfig
    });
}

function deployL2OutputOracle() returns (L2OutputOracle _l2Oracle) {
    _l2Oracle = new L2OutputOracle({
        _submissionInterval: 1800,
        _l2BlockTime: 2,
        _startingBlockNumber: 105_235_063,
        _startingTimestamp: 1_686_068_903,
        _proposer: Constants.Mainnet.AMO_OWNER,
        _challenger: Constants.Mainnet.AMO_OWNER,
        _finalizationPeriodSeconds: 604_800
    });
}

function deploySystemConfig() returns (SystemConfig _systemConfig) {
    _systemConfig = new SystemConfig({
        _owner: Constants.Mainnet.AMO_OWNER,
        _overhead: 188,
        _scalar: 684_000,
        _batcherHash: 0x0000000000000000000000006887246668a3b87f54deb3b94ba47a6f63f32985,
        _gasLimit: 30_000_000,
        _unsafeBlockSigner: Constants.Mainnet.AMO_OWNER,
        _config: ResourceMetering.ResourceConfig(
            20_000_000,
            10,
            8,
            1_000_000_000,
            1_000_000,
            340_282_366_920_938_463_463_374_607_431_768_211_455
        )
    });
}

function deployMockFxs() returns (MintableBurnableTestERC20 _token) {
    _token = new MintableBurnableTestERC20({ name_: "mockFXS", symbol_: "mFXS" });
}

function deployVestedFXS(address _tokenAddress) returns (VestedFXS _vestedFXS) {
    _vestedFXS = new VestedFXS({
        _tokenAddr: _tokenAddress,
        _name: "Vote-Escrowed FXS",
        _symbol: "veFXS",
        _version: "veFXS_2.0.0"
    });
}

function deployVestedFXSUtils(address _veFXSAddress) returns (VestedFXSUtils _vestedFXSUtils) {
    _vestedFXSUtils = new VestedFXSUtils({ _vestedFXS: _veFXSAddress });
}

contract DeployAll is BaseScript {
    // System Addresses
    SystemConfig public systemConfig;
    L2OutputOracle public l2Oracle;
    FraxchainPortal public fraxchainPortal;

    // VeFXS-related addresses
    VestedFXS public vestedFXS;
    MintableBurnableTestERC20 public token;
    VestedFXSUtils public vestedFXSUtils;

    constructor() {}

    function run() external {
        vm.startBroadcast();

        // Deploy system contracts
        systemConfig = deploySystemConfig();
        l2Oracle = deployL2OutputOracle();
        fraxchainPortal = deployFraxchainPortal(l2Oracle, systemConfig);

        // Deploy the veFXS contracts
        token = deployMockFxs();
        vestedFXS = deployVestedFXS(address(token));
        vestedFXSUtils = deployVestedFXSUtils(address(vestedFXS));

        // Print the admin
        console.log("vestedFXS admin (in DeployVeFXS): ", vestedFXS.admin());

        vm.stopBroadcast();
    }
}
