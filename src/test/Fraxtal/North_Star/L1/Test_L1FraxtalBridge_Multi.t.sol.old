// SPDX-License-Identifier: ISC
pragma solidity ^0.8.0;

import { AddressAliasHelper } from "@eth-optimism/contracts-bedrock/src/vendor/AddressAliasHelper.sol";
import { FraxtalPortal2 } from "src/contracts/Fraxtal/L1/FraxtalPortal2.sol";
import { BadTarget, LargeCalldata, SmallGasLimit, TransferFailed, OnlyCustomGasToken, NoValue, Unauthorized, CallPaused, GasEstimation, NonReentrant, InvalidProof, InvalidGameType, InvalidDisputeGame, InvalidMerkleProof, Blacklisted, Unproven, ProposalNotValidated, AlreadyFinalized } from "@eth-optimism/contracts-bedrock/src/libraries/PortalErrors.sol";
import { FraxchainPortal } from "src/contracts/Fraxtal/L1/FraxchainPortal.sol";
import "../BaseTestFraxtalL1Devnet.t.sol";
import { Constants as ConstantsBedrock } from "@eth-optimism/contracts-bedrock/src/libraries/Constants.sol";
import { NextImpl } from "@eth-optimism/contracts-bedrock/test/mocks/NextImpl.sol";
import { MockERC20 } from "@eth-optimism/contracts-bedrock/lib/solmate/src/test/utils/mocks/MockERC20.sol";
import { IProxy } from "@eth-optimism/contracts-bedrock/src/universal/interfaces/IProxy.sol";
import { EIP1967Helper } from "@eth-optimism/contracts-bedrock/test/mocks/EIP1967Helper.sol";

// Most taken from Optimism's tests
// Good reference: https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts-bedrock/test/L1/l1StandardBridgeCGT.t.sol

// ******************************************************************************
// ******************************** COMMON TESTS ********************************
// ******************************************************************************

contract L1FraxtalBridge_Common_Test is BaseTestFraxtalL1Devnet {
    function setUp() public {
        defaultSetup();

        // Give the portal some FXS
        hoax(alice);
        FXS.approve(optimismPortalPxyAddress, 10_000e18);
        hoax(alice);
        fraxtalPortal2.depositERC20Transaction(alice, 10_000e18, 10_000e18, 200_000, false, "");
    }

    /// @dev Test that the accessors return the correct initialized values.
    function test_getters_succeeds() external view {
        assert(l1StandardBridgeCGT.l2TokenBridge() == address(l2StandardBridge));
        assert(address(l1StandardBridgeCGT.OTHER_BRIDGE()) == address(l2StandardBridge));
        assert(address(l1StandardBridgeCGT.messenger()) == address(l1XDomainMsgrCGT));
        assert(address(l1StandardBridgeCGT.MESSENGER()) == address(l1XDomainMsgrCGT));
        assert(address(l1StandardBridgeCGT.superchainConfig()) == address(superchainConfig));
        assert(address(l1StandardBridgeCGT.systemConfig()) == address(systemConfig));
    }
}

contract L1FraxtalBridge_Pause_Test is BaseTestFraxtalL1Devnet {
    function setUp() public {
        defaultSetup();
    }

    /// @dev Verifies that the `paused` accessor returns the same value as the `paused` function of the
    ///      `superchainConfig`.
    function test_paused_succeeds() external {
        assertEq(l1StandardBridgeCGT.paused(), superchainConfig.paused());
    }

    /// @dev Ensures that the `paused` function of the bridge contract actually calls the `paused` function of the
    ///      `superchainConfig`.
    function test_pause_callsSuperchainConfig_succeeds() external {
        vm.expectCall(address(superchainConfig), abi.encodeCall(ISuperchainConfig.paused, ()));
        l1StandardBridgeCGT.paused();
    }

    /// @dev Checks that the `paused` state of the bridge matches the `paused` state of the `superchainConfig` after
    ///      it's been changed.
    function test_pause_matchesSuperchainConfig_succeeds() external {
        assertFalse(l1StandardBridgeCGT.paused());
        assertEq(l1StandardBridgeCGT.paused(), superchainConfig.paused());

        vm.prank(superchainConfig.guardian());
        superchainConfig.pause("identifier");

        assertTrue(l1StandardBridgeCGT.paused());
        assertEq(l1StandardBridgeCGT.paused(), superchainConfig.paused());
    }
}

contract L1FraxtalBridge_Pause_TestFail is BaseTestFraxtalL1Devnet {
    /// @dev Sets up the test by pausing the bridge, giving ether to the bridge and mocking
    ///      the calls to the xDomainMessageSender so that it returns the correct value.
    function setUp() public {
        defaultSetup();

        vm.prank(superchainConfig.guardian());
        superchainConfig.pause("identifier");
        assertTrue(l1StandardBridgeCGT.paused());

        vm.deal(address(l1StandardBridgeCGT.messenger()), 1 ether);

        vm.mockCall(address(l1StandardBridgeCGT.messenger()), abi.encodeCall(ICrossDomainMessenger.xDomainMessageSender, ()), abi.encode(address(l1StandardBridgeCGT.otherBridge())));
    }

    /// @dev Confirms that the `finalizeBridgeETH` function reverts when the bridge is paused.
    function test_pause_finalizeBridgeETH_reverts() external {
        vm.prank(address(l1StandardBridgeCGT.messenger()));
        vm.expectRevert("StandardBridge: paused");
        l1StandardBridgeCGT.finalizeBridgeETH{ value: 100 }({ _from: address(2), _to: address(3), _amount: 100, _extraData: hex"" });
    }

    /// @dev Confirms that the `finalizeETHWithdrawal` function reverts when the bridge is paused.
    function test_pause_finalizeETHWithdrawal_reverts() external {
        vm.prank(address(l1StandardBridgeCGT.messenger()));
        vm.expectRevert("StandardBridge: paused");
        l1StandardBridgeCGT.finalizeETHWithdrawal{ value: 100 }({ _from: address(2), _to: address(3), _amount: 100, _extraData: hex"" });
    }

    /// @dev Confirms that the `finalizeERC20Withdrawal` function reverts when the bridge is paused.
    function test_pause_finalizeERC20Withdrawal_reverts() external {
        vm.prank(address(l1StandardBridgeCGT.messenger()));
        vm.expectRevert("StandardBridge: paused");
        l1StandardBridgeCGT.finalizeERC20Withdrawal({ _l1Token: address(0), _l2Token: address(0), _from: address(0), _to: address(0), _amount: 0, _extraData: hex"" });
    }

    /// @dev Confirms that the `finalizeBridgeERC20` function reverts when the bridge is paused.
    function test_pause_finalizeBridgeERC20_reverts() external {
        vm.prank(address(l1StandardBridgeCGT.messenger()));
        vm.expectRevert("StandardBridge: paused");
        l1StandardBridgeCGT.finalizeBridgeERC20({ _localToken: address(0), _remoteToken: address(0), _from: address(0), _to: address(0), _amount: 0, _extraData: hex"" });
    }
}

contract L1FraxtalBridge_Receive_Test is BaseTestFraxtalL1Devnet {
    function setUp() public {
        defaultSetup();
    }

    // /// @dev Tests receive bridges ETH successfully.
    // function test_receive_succeeds() external {
    //     assertEq(address(fraxtalPortal2).balance, 0);

    //     // The legacy event must be emitted for backwards compatibility
    //     vm.expectEmit(address(l1StandardBridgeCGT));
    //     emit ETHDepositInitiated(alice, alice, 100, hex"");

    //     vm.expectEmit(address(l1StandardBridgeCGT));
    //     emit ETHBridgeInitiated(alice, alice, 100, hex"");

    //     vm.expectCall(
    //         address(l1XDomainMsgrCGT),
    //         abi.encodeCall(
    //             ICrossDomainMessenger.sendMessage,
    //             (
    //                 address(l2StandardBridge),
    //                 abi.encodeCall(StandardBridge.finalizeBridgeETH, (alice, alice, 100, hex"")),
    //                 200_000
    //             )
    //         )
    //     );

    //     vm.prank(alice, alice);
    //     (bool success,) = address(l1StandardBridgeCGT).call{ value: 100 }(hex"");
    //     assertEq(success, true);
    //     assertEq(address(fraxtalPortal2).balance, 100);
    // }
}

contract L1FraxtalBridge_Receive_TestFail is BaseTestFraxtalL1Devnet {
    function setUp() public {
        defaultSetup();
    }

    /// @dev Tests receive function reverts with custom gas token.
    function testFuzz_receive_customGasToken_reverts(uint256 _value) external {
        vm.prank(alice, alice);
        vm.mockCall(address(systemConfig), abi.encodeCall(systemConfig.gasPayingToken, ()), abi.encode(address(1), uint8(18)));
        vm.deal(alice, _value);
        (bool success, bytes memory data) = address(l1StandardBridgeCGT).call{ value: _value }(hex"");
        assertFalse(success);
        assembly {
            data := add(data, 0x04)
        }
        assertEq(abi.decode(data, (string)), "StandardBridge: cannot bridge ETH with custom gas token");
    }
}

contract PreBridgeETH is BaseTestFraxtalL1Devnet {
    function setUp() public {
        defaultSetup();
    }

    /// @dev Asserts the expected calls and events for bridging ETH depending
    ///      on whether the bridge call is legacy or not.
    function _preBridgeETH(bool isLegacy, uint256 value) internal {
        assertEq(address(fraxtalPortal2).balance, 0);
        uint256 nonce = l1XDomainMsgrCGT.messageNonce();
        uint256 version = 0; // Internal constant in the OptimismPortal: DEPOSIT_VERSION
        address l1MessengerAliased = AddressAliasHelper.applyL1ToL2Alias(address(l1XDomainMsgrCGT));

        bytes memory message = abi.encodeCall(StandardBridge.finalizeBridgeETH, (alice, alice, value, hex"dead"));

        if (isLegacy) {
            vm.expectCall(address(l1StandardBridgeCGT), value, abi.encodeCall(l1StandardBridgeCGT.depositETH, (50_000, hex"dead")));
        } else {
            vm.expectCall(address(l1StandardBridgeCGT), value, abi.encodeCall(l1StandardBridgeCGT.bridgeETH, (50_000, hex"dead")));
        }
        vm.expectCall(address(l1XDomainMsgrCGT), value, abi.encodeCall(ICrossDomainMessenger.sendMessage, (address(l2StandardBridge), message, 50_000)));

        bytes memory innerMessage = abi.encodeCall(ICrossDomainMessenger.relayMessage, (nonce, address(l1StandardBridgeCGT), address(l2StandardBridge), value, 50_000, message));

        uint64 baseGas = l1XDomainMsgrCGT.baseGas(message, 50_000);
        vm.expectCall(address(fraxtalPortal2), value, abi.encodeCall(FraxtalPortal2.depositTransaction, (address(l2CrossDomainMessenger), value, baseGas, false, innerMessage)));

        bytes memory opaqueData = abi.encodePacked(uint256(value), uint256(value), baseGas, false, innerMessage);

        vm.expectEmit(address(l1StandardBridgeCGT));
        emit ETHDepositInitiated(alice, alice, value, hex"dead");

        vm.expectEmit(address(l1StandardBridgeCGT));
        emit ETHBridgeInitiated(alice, alice, value, hex"dead");

        // OptimismPortal emits a TransactionDeposited event on `depositTransaction` call
        vm.expectEmit(address(fraxtalPortal2));
        emit TransactionDeposited(l1MessengerAliased, address(l2CrossDomainMessenger), version, opaqueData);

        // SentMessage event emitted by the CrossDomainMessenger
        vm.expectEmit(address(l1XDomainMsgrCGT));
        emit SentMessage(address(l2StandardBridge), address(l1StandardBridgeCGT), message, nonce, 50_000);

        // SentMessageExtension1 event emitted by the CrossDomainMessenger
        vm.expectEmit(address(l1XDomainMsgrCGT));
        emit SentMessageExtension1(address(l1StandardBridgeCGT), value);

        vm.prank(alice, alice);
    }
}

// contract L1FraxtalBridge_DepositETH_Test is PreBridgeETH {

//     /// @dev Tests that depositing ETH succeeds.
//     ///      Emits ETHDepositInitiated and ETHBridgeInitiated events.
//     ///      Calls depositTransaction on the OptimismPortal.
//     ///      Only EOA can call depositETH.
//     ///      ETH ends up in the optimismPortal.
//     function test_depositETH_succeeds() external {
//         _preBridgeETH({ isLegacy: true, value: 500 });
//         l1StandardBridgeCGT.depositETH{ value: 500 }(50000, hex"dead");
//         assertEq(address(fraxtalPortal2).balance, 500);
//     }
// }

contract L1FraxtalBridge_DepositETH_TestFail is BaseTestFraxtalL1Devnet {
    function setUp() public {
        defaultSetup();
    }

    // /// @dev Tests that depositing ETH reverts if the call is not from an EOA.
    // function test_depositETH_notEoa_reverts() external {
    //     vm.etch(alice, address(L1Token).code);
    //     vm.expectRevert("StandardBridge: function can only be called from an EOA");
    //     vm.prank(alice);
    //     l1StandardBridgeCGT.depositETH{ value: 1 }(300, hex"");
    // }

    /// @dev Tests that depositing reverts with custom gas token.
    function test_depositETH_customGasToken_reverts() external {
        vm.mockCall(address(systemConfig), abi.encodeCall(systemConfig.gasPayingToken, ()), abi.encode(address(1), uint8(2)));
        vm.prank(alice, alice);
        vm.expectRevert("StandardBridge: cannot bridge ETH with custom gas token");
        l1StandardBridgeCGT.depositETH(50_000, hex"dead");
    }
}

// contract L1FraxtalBridge_BridgeETH_Test is PreBridgeETH {
//     /// @dev Tests that bridging ETH succeeds.
//     ///      Emits ETHDepositInitiated and ETHBridgeInitiated events.
//     ///      Calls depositTransaction on the OptimismPortal.
//     ///      Only EOA can call bridgeETH.
//     ///      ETH ends up in the optimismPortal.
//     function test_bridgeETH_succeeds() external {
//         _preBridgeETH({ isLegacy: false, value: 500 });
//         l1StandardBridgeCGT.bridgeETH{ value: 500 }(50000, hex"dead");
//         assertEq(address(fraxtalPortal2).balance, 500);
//     }
// }

contract L1FraxtalBridge_BridgeETH_TestFail is PreBridgeETH {
    /// @dev Tests that bridging eth reverts with custom gas token.
    function test_bridgeETH_customGasToken_reverts() external {
        vm.prank(alice, alice);
        vm.mockCall(address(systemConfig), abi.encodeCall(systemConfig.gasPayingToken, ()), abi.encode(address(1), uint8(2)));
        vm.expectRevert("StandardBridge: cannot bridge ETH with custom gas token");

        l1StandardBridgeCGT.bridgeETH(50_000, hex"dead");
    }
}

contract PreBridgeETHTo is BaseTestFraxtalL1Devnet {
    function setUp() public {
        defaultSetup();
    }

    /// @dev Asserts the expected calls and events for bridging ETH to a different
    ///      address depending on whether the bridge call is legacy or not.
    function _preBridgeETHTo(bool isLegacy, uint256 value) internal {
        assertEq(address(fraxtalPortal2).balance, 0);
        uint256 nonce = l1XDomainMsgrCGT.messageNonce();
        uint256 version = 0; // Internal constant in the OptimismPortal: DEPOSIT_VERSION
        address l1MessengerAliased = AddressAliasHelper.applyL1ToL2Alias(address(l1XDomainMsgrCGT));

        if (isLegacy) {
            vm.expectCall(address(l1StandardBridgeCGT), value, abi.encodeCall(l1StandardBridgeCGT.depositETHTo, (bob, 60_000, hex"dead")));
        } else {
            vm.expectCall(address(l1StandardBridgeCGT), value, abi.encodeCall(l1StandardBridgeCGT.bridgeETHTo, (bob, 60_000, hex"dead")));
        }

        bytes memory message = abi.encodeCall(StandardBridge.finalizeBridgeETH, (alice, bob, value, hex"dead"));

        // the L1 bridge should call
        // l1XDomainMsgrCGT.sendMessage
        vm.expectCall(address(l1XDomainMsgrCGT), abi.encodeCall(ICrossDomainMessenger.sendMessage, (address(l2StandardBridge), message, 60_000)));

        bytes memory innerMessage = abi.encodeCall(ICrossDomainMessenger.relayMessage, (nonce, address(l1StandardBridgeCGT), address(l2StandardBridge), value, 60_000, message));

        uint64 baseGas = l1XDomainMsgrCGT.baseGas(message, 60_000);
        vm.expectCall(address(fraxtalPortal2), abi.encodeCall(IOptimismPortal.depositTransaction, (address(l2CrossDomainMessenger), value, baseGas, false, innerMessage)));

        bytes memory opaqueData = abi.encodePacked(uint256(value), uint256(value), baseGas, false, innerMessage);

        vm.expectEmit(address(l1StandardBridgeCGT));
        emit ETHDepositInitiated(alice, bob, value, hex"dead");

        vm.expectEmit(address(l1StandardBridgeCGT));
        emit ETHBridgeInitiated(alice, bob, value, hex"dead");

        // OptimismPortal emits a TransactionDeposited event on `depositTransaction` call
        vm.expectEmit(address(fraxtalPortal2));
        emit TransactionDeposited(l1MessengerAliased, address(l2CrossDomainMessenger), version, opaqueData);

        // SentMessage event emitted by the CrossDomainMessenger
        vm.expectEmit(address(l1XDomainMsgrCGT));
        emit SentMessage(address(l2StandardBridge), address(l1StandardBridgeCGT), message, nonce, 60_000);

        // SentMessageExtension1 event emitted by the CrossDomainMessenger
        vm.expectEmit(address(l1XDomainMsgrCGT));
        emit SentMessageExtension1(address(l1StandardBridgeCGT), value);

        // deposit eth to bob
        vm.prank(alice, alice);
    }
}

// contract L1FraxtalBridge_DepositETHTo_Test is PreBridgeETHTo {
//     /// @dev Tests that depositing ETH to a different address succeeds.
//     ///      Emits ETHDepositInitiated event.
//     ///      Calls depositTransaction on the OptimismPortal.
//     ///      EOA or contract can call depositETHTo.
//     ///      ETH ends up in the optimismPortal.
//     function test_depositETHTo_succeeds() external {
//         _preBridgeETHTo({ isLegacy: true, value: 600 });
//         l1StandardBridgeCGT.depositETHTo{ value: 600 }(bob, 60000, hex"dead");
//         assertEq(address(fraxtalPortal2).balance, 600);
//     }
// }

contract L1FraxtalBridge_DepositETHTo_TestFail is BaseTestFraxtalL1Devnet {
    function setUp() public {
        defaultSetup();
    }

    /// @dev Tests that depositETHTo reverts with custom gas token.
    function testFuzz_depositETHTo_customGasToken_reverts(uint256 _value, address _to, uint32 _minGasLimit, bytes calldata _extraData) external {
        vm.mockCall(address(systemConfig), abi.encodeCall(systemConfig.gasPayingToken, ()), abi.encode(address(1), uint8(2)));
        vm.deal(address(this), _value);
        vm.expectRevert("StandardBridge: cannot bridge ETH with custom gas token");

        l1StandardBridgeCGT.depositETHTo{ value: _value }(_to, _minGasLimit, _extraData);
    }
}

// contract L1FraxtalBridge_BridgeETHTo_Test is PreBridgeETHTo {
//     /// @dev Tests that bridging ETH to a different address succeeds.
//     ///      Emits ETHDepositInitiated and ETHBridgeInitiated events.
//     ///      Calls depositTransaction on the OptimismPortal.
//     ///      Only EOA can call bridgeETHTo.
//     ///      ETH ends up in the optimismPortal.
//     function test_bridgeETHTo_succeeds() external {
//         _preBridgeETHTo({ isLegacy: false, value: 600 });
//         l1StandardBridgeCGT.bridgeETHTo{ value: 600 }(bob, 60000, hex"dead");
//         assertEq(address(fraxtalPortal2).balance, 600);
//     }
// }

contract L1FraxtalBridge_BridgeETHTo_TestFail is PreBridgeETHTo {
    /// @dev Tests that bridging reverts with custom gas token.
    function testFuzz_bridgeETHTo_customGasToken_reverts(uint256 _value, uint32 _minGasLimit, bytes calldata _extraData) external {
        vm.mockCall(address(systemConfig), abi.encodeCall(systemConfig.gasPayingToken, ()), abi.encode(address(1), uint8(2)));
        vm.deal(address(this), _value);
        vm.expectRevert("StandardBridge: cannot bridge ETH with custom gas token");

        l1StandardBridgeCGT.bridgeETHTo{ value: _value }(bob, _minGasLimit, _extraData);
    }
}

contract L1FraxtalBridge_DepositERC20_Test is BaseTestFraxtalL1Devnet {
    using stdStorage for StdStorage;

    function setUp() public {
        defaultSetup();
    }

    // depositERC20
    // - updates bridge.deposits
    // - emits ERC20DepositInitiated
    // - calls optimismPortal.depositTransaction
    // - only callable by EOA

    /// @dev Tests that depositing ERC20 to the bridge succeeds.
    ///      Bridge deposits are updated.
    ///      Emits ERC20DepositInitiated event.
    ///      Calls depositTransaction on the OptimismPortal.
    ///      Only EOA can call depositERC20.
    function test_depositERC20_succeeds() external {
        uint256 nonce = l1XDomainMsgrCGT.messageNonce();
        uint256 version = 0; // Internal constant in the OptimismPortal: DEPOSIT_VERSION
        address l1MessengerAliased = AddressAliasHelper.applyL1ToL2Alias(address(l1XDomainMsgrCGT));

        // Deal Alice's ERC20 State
        deal(address(L1Token), alice, 100_000, true);
        vm.prank(alice);
        L1Token.approve(address(l1StandardBridgeCGT), type(uint256).max);

        // The l1StandardBridge should transfer alice's tokens to itself
        vm.expectCall(address(L1Token), abi.encodeCall(ERC20.transferFrom, (alice, address(l1StandardBridgeCGT), 100)));

        bytes memory message = abi.encodeCall(StandardBridge.finalizeBridgeERC20, (address(L2Token), address(L1Token), alice, alice, 100, hex""));

        // the L1 bridge should call l1XDomainMsgrCGT.sendMessage
        vm.expectCall(address(l1XDomainMsgrCGT), abi.encodeCall(ICrossDomainMessenger.sendMessage, (address(l2StandardBridge), message, 10_000)));

        bytes memory innerMessage = abi.encodeCall(ICrossDomainMessenger.relayMessage, (nonce, address(l1StandardBridgeCGT), address(l2StandardBridge), 0, 10_000, message));

        uint64 baseGas = l1XDomainMsgrCGT.baseGas(message, 10_000);
        vm.expectCall(address(fraxtalPortal2), abi.encodeCall(IOptimismPortal.depositTransaction, (address(l2CrossDomainMessenger), 0, baseGas, false, innerMessage)));

        bytes memory opaqueData = abi.encodePacked(uint256(0), uint256(0), baseGas, false, innerMessage);

        // Should emit both the bedrock and legacy events
        vm.expectEmit(address(l1StandardBridgeCGT));
        emit ERC20DepositInitiated(address(L1Token), address(L2Token), alice, alice, 100, hex"");

        vm.expectEmit(address(l1StandardBridgeCGT));
        emit ERC20BridgeInitiated(address(L1Token), address(L2Token), alice, alice, 100, hex"");

        // OptimismPortal emits a TransactionDeposited event on `depositTransaction` call
        vm.expectEmit(address(fraxtalPortal2));
        emit TransactionDeposited(l1MessengerAliased, address(l2CrossDomainMessenger), version, opaqueData);

        // SentMessage event emitted by the CrossDomainMessenger
        vm.expectEmit(address(l1XDomainMsgrCGT));
        emit SentMessage(address(l2StandardBridge), address(l1StandardBridgeCGT), message, nonce, 10_000);

        // SentMessageExtension1 event emitted by the CrossDomainMessenger
        vm.expectEmit(address(l1XDomainMsgrCGT));
        emit SentMessageExtension1(address(l1StandardBridgeCGT), 0);

        vm.prank(alice);
        l1StandardBridgeCGT.depositERC20(address(L1Token), address(L2Token), 100, 10_000, hex"");
        assertEq(l1StandardBridgeCGT.deposits(address(L1Token), address(L2Token)), 100);
    }
}

contract L1FraxtalBridge_DepositERC20_TestFail is BaseTestFraxtalL1Devnet {
    function setUp() public {
        defaultSetup();
    }

    /// @dev Tests that depositing an ERC20 to the bridge reverts
    ///      if the caller is not an EOA.
    function test_depositERC20_notEoa_reverts() external {
        // turn alice into a contract
        vm.etch(alice, hex"ffff");

        vm.expectRevert("StandardBridge: function can only be called from an EOA");
        vm.prank(alice, alice);
        l1StandardBridgeCGT.depositERC20(address(0), address(0), 100, 100, hex"");
    }
}

contract L1FraxtalBridge_DepositERC20To_Test is BaseTestFraxtalL1Devnet {
    function setUp() public {
        defaultSetup();
    }

    /// @dev Tests that depositing ERC20 to the bridge succeeds when
    ///      sent to a different address.
    ///      Bridge deposits are updated.
    ///      Emits ERC20DepositInitiated event.
    ///      Calls depositTransaction on the OptimismPortal.
    ///      Contracts can call depositERC20.
    function test_depositERC20To_succeeds() external {
        uint256 nonce = l1XDomainMsgrCGT.messageNonce();
        uint256 version = 0; // Internal constant in the OptimismPortal: DEPOSIT_VERSION
        address l1MessengerAliased = AddressAliasHelper.applyL1ToL2Alias(address(l1XDomainMsgrCGT));

        bytes memory message = abi.encodeCall(StandardBridge.finalizeBridgeERC20, (address(L2Token), address(L1Token), alice, bob, 1000, hex""));

        bytes memory innerMessage = abi.encodeCall(ICrossDomainMessenger.relayMessage, (nonce, address(l1StandardBridgeCGT), address(l2StandardBridge), 0, 10_000, message));

        uint64 baseGas = l1XDomainMsgrCGT.baseGas(message, 10_000);
        bytes memory opaqueData = abi.encodePacked(uint256(0), uint256(0), baseGas, false, innerMessage);

        deal(address(L1Token), alice, 100_000, true);

        vm.prank(alice);
        L1Token.approve(address(l1StandardBridgeCGT), type(uint256).max);

        // Should emit both the bedrock and legacy events
        vm.expectEmit(address(l1StandardBridgeCGT));
        emit ERC20DepositInitiated(address(L1Token), address(L2Token), alice, bob, 1000, hex"");

        vm.expectEmit(address(l1StandardBridgeCGT));
        emit ERC20BridgeInitiated(address(L1Token), address(L2Token), alice, bob, 1000, hex"");

        // OptimismPortal emits a TransactionDeposited event on `depositTransaction` call
        vm.expectEmit(address(fraxtalPortal2));
        emit TransactionDeposited(l1MessengerAliased, address(l2CrossDomainMessenger), version, opaqueData);

        // SentMessage event emitted by the CrossDomainMessenger
        vm.expectEmit(address(l1XDomainMsgrCGT));
        emit SentMessage(address(l2StandardBridge), address(l1StandardBridgeCGT), message, nonce, 10_000);

        // SentMessageExtension1 event emitted by the CrossDomainMessenger
        vm.expectEmit(address(l1XDomainMsgrCGT));
        emit SentMessageExtension1(address(l1StandardBridgeCGT), 0);

        // the L1 bridge should call l1XDomainMsgrCGT.sendMessage
        vm.expectCall(address(l1XDomainMsgrCGT), abi.encodeCall(ICrossDomainMessenger.sendMessage, (address(l2StandardBridge), message, 10_000)));
        // The L1 XDM should call OptimismPortal.depositTransaction
        vm.expectCall(address(fraxtalPortal2), abi.encodeCall(IOptimismPortal.depositTransaction, (address(l2CrossDomainMessenger), 0, baseGas, false, innerMessage)));
        vm.expectCall(address(L1Token), abi.encodeCall(ERC20.transferFrom, (alice, address(l1StandardBridgeCGT), 1000)));

        vm.prank(alice);
        l1StandardBridgeCGT.depositERC20To(address(L1Token), address(L2Token), bob, 1000, 10_000, hex"");

        assertEq(l1StandardBridgeCGT.deposits(address(L1Token), address(L2Token)), 1000);
    }
}

contract L1FraxtalBridge_FinalizeETHWithdrawal_Test is BaseTestFraxtalL1Devnet {
    function setUp() public {
        defaultSetup();
    }

    using stdStorage for StdStorage;

    /// @dev Tests that finalizing an ETH withdrawal succeeds.
    ///      Emits ETHWithdrawalFinalized event.
    ///      Only callable by the L2 bridge.
    // function test_finalizeETHWithdrawal_succeeds() external {
    //     uint256 aliceBalance = alice.balance;

    //     vm.expectEmit(address(l1StandardBridgeCGT));
    //     emit ETHWithdrawalFinalized(alice, alice, 100, hex"");

    //     vm.expectEmit(address(l1StandardBridgeCGT));
    //     emit ETHBridgeFinalized(alice, alice, 100, hex"");

    //     vm.expectCall(alice, hex"");

    //     vm.mockCall(
    //         address(l1StandardBridgeCGT.messenger()),
    //         abi.encodeCall(ICrossDomainMessenger.xDomainMessageSender, ()),
    //         abi.encode(address(l1StandardBridgeCGT.OTHER_BRIDGE()))
    //     );
    //     // ensure that the messenger has ETH to call with
    //     vm.deal(address(l1StandardBridgeCGT.messenger()), 100);
    //     vm.prank(address(l1StandardBridgeCGT.messenger()));
    //     l1StandardBridgeCGT.finalizeETHWithdrawal{ value: 100 }(alice, alice, 100, hex"");

    //     assertEq(address(l1StandardBridgeCGT.messenger()).balance, 0);
    //     assertEq(aliceBalance + 100, alice.balance);
    // }
}

contract L1FraxtalBridge_FinalizeETHWithdrawal_TestFail is BaseTestFraxtalL1Devnet {
    function setUp() public {
        defaultSetup();
    }

    /// @dev Tests that finalizeETHWithdrawal reverts with custom gas token.
    function testFuzz_finalizeETHWithdrawal_customGasToken_reverts(uint256 _value, bytes calldata _extraData) external {
        vm.mockCall(address(systemConfig), abi.encodeCall(systemConfig.gasPayingToken, ()), abi.encode(address(1), uint8(2)));
        vm.mockCall(address(l1StandardBridgeCGT.messenger()), abi.encodeCall(ICrossDomainMessenger.xDomainMessageSender, ()), abi.encode(address(l1StandardBridgeCGT.OTHER_BRIDGE())));
        vm.deal(address(l1StandardBridgeCGT.messenger()), _value);
        vm.prank(address(l1StandardBridgeCGT.messenger()));
        vm.expectRevert("StandardBridge: cannot bridge ETH with custom gas token");

        l1StandardBridgeCGT.finalizeETHWithdrawal{ value: _value }(alice, alice, _value, _extraData);
    }
}

contract L1FraxtalBridge_FinalizeERC20Withdrawal_Test is BaseTestFraxtalL1Devnet {
    using stdStorage for StdStorage;

    function setUp() public {
        defaultSetup();
    }

    /// @dev Tests that finalizing an ERC20 withdrawal succeeds.
    ///      Bridge deposits are updated.
    ///      Emits ERC20WithdrawalFinalized event.
    ///      Only callable by the L2 bridge.
    function test_finalizeERC20Withdrawal_succeeds() external {
        deal(address(L1Token), address(l1StandardBridgeCGT), 100, true);

        uint256 slot = stdstore.target(address(l1StandardBridgeCGT)).sig("deposits(address,address)").with_key(address(L1Token)).with_key(address(L2Token)).find();

        // Give the L1 bridge some ERC20 tokens
        vm.store(address(l1StandardBridgeCGT), bytes32(slot), bytes32(uint256(100)));
        assertEq(l1StandardBridgeCGT.deposits(address(L1Token), address(L2Token)), 100);

        vm.expectEmit(address(l1StandardBridgeCGT));
        emit ERC20WithdrawalFinalized(address(L1Token), address(L2Token), alice, alice, 100, hex"");

        vm.expectEmit(address(l1StandardBridgeCGT));
        emit ERC20BridgeFinalized(address(L1Token), address(L2Token), alice, alice, 100, hex"");

        vm.expectCall(address(L1Token), abi.encodeCall(ERC20.transfer, (alice, 100)));

        vm.mockCall(address(l1StandardBridgeCGT.messenger()), abi.encodeCall(ICrossDomainMessenger.xDomainMessageSender, ()), abi.encode(address(l1StandardBridgeCGT.OTHER_BRIDGE())));
        vm.prank(address(l1StandardBridgeCGT.messenger()));
        l1StandardBridgeCGT.finalizeERC20Withdrawal(address(L1Token), address(L2Token), alice, alice, 100, hex"");

        assertEq(L1Token.balanceOf(address(l1StandardBridgeCGT)), 0);
        assertEq(L1Token.balanceOf(address(alice)), 100);
    }
}

contract L1FraxtalBridge_FinalizeERC20Withdrawal_TestFail is BaseTestFraxtalL1Devnet {
    function setUp() public {
        defaultSetup();
    }

    /// @dev Tests that finalizing an ERC20 withdrawal reverts if the caller is not the L2 bridge.
    function test_finalizeERC20Withdrawal_notMessenger_reverts() external {
        vm.mockCall(address(l1StandardBridgeCGT.messenger()), abi.encodeCall(ICrossDomainMessenger.xDomainMessageSender, ()), abi.encode(address(l1StandardBridgeCGT.OTHER_BRIDGE())));
        vm.prank(address(28));
        vm.expectRevert("StandardBridge: function can only be called from the other bridge");
        l1StandardBridgeCGT.finalizeERC20Withdrawal(address(L1Token), address(L2Token), alice, alice, 100, hex"");
    }

    /// @dev Tests that finalizing an ERC20 withdrawal reverts if the caller is not the L2 bridge.
    function test_finalizeERC20Withdrawal_notOtherBridge_reverts() external {
        vm.mockCall(address(l1StandardBridgeCGT.messenger()), abi.encodeCall(ICrossDomainMessenger.xDomainMessageSender, ()), abi.encode(address(address(0))));
        vm.prank(address(l1StandardBridgeCGT.messenger()));
        vm.expectRevert("StandardBridge: function can only be called from the other bridge");
        l1StandardBridgeCGT.finalizeERC20Withdrawal(address(L1Token), address(L2Token), alice, alice, 100, hex"");
    }
}

// contract L1FraxtalBridge_FinalizeBridgeETH_Test is BaseTestFraxtalL1Devnet {
//     function setUp() public {
//         defaultSetup();
//     }

//     /// @dev Tests that finalizing bridged ETH succeeds.
//     function test_finalizeBridgeETH_succeeds() external {
//         address messenger = address(l1StandardBridgeCGT.messenger());
//         vm.mockCall(
//             messenger,
//             abi.encodeCall(ICrossDomainMessenger.xDomainMessageSender, ()),
//             abi.encode(address(l1StandardBridgeCGT.OTHER_BRIDGE()))
//         );
//         vm.deal(messenger, 100);
//         vm.prank(messenger);

//         vm.expectEmit(address(l1StandardBridgeCGT));
//         emit ETHBridgeFinalized(alice, alice, 100, hex"");

//         l1StandardBridgeCGT.finalizeBridgeETH{ value: 100 }(alice, alice, 100, hex"");
//     }
// }

contract L1FraxtalBridge_FinalizeBridgeETH_TestFail is BaseTestFraxtalL1Devnet {
    function setUp() public {
        defaultSetup();
    }

    /// @dev Tests that finalizing bridged reverts with custom gas token.
    function testFuzz_finalizeBridgeETH_customGasToken_reverts(uint256 _value, bytes calldata _extraData) external {
        vm.mockCall(address(l1StandardBridgeCGT.messenger()), abi.encodeCall(ICrossDomainMessenger.xDomainMessageSender, ()), abi.encode(address(l1StandardBridgeCGT.OTHER_BRIDGE())));
        vm.deal(address(l1XDomainMsgrCGT), _value);
        vm.prank(address(l1XDomainMsgrCGT));
        vm.mockCall(address(systemConfig), abi.encodeCall(systemConfig.gasPayingToken, ()), abi.encode(address(1), uint8(2)));
        vm.expectRevert("StandardBridge: cannot bridge ETH with custom gas token");

        l1StandardBridgeCGT.finalizeBridgeETH{ value: _value }(alice, alice, _value, _extraData);
    }

    // /// @dev Tests that finalizing bridged ETH reverts if the amount is incorrect.
    // function test_finalizeBridgeETH_incorrectValue_reverts() external {
    //     address messenger = address(l1StandardBridgeCGT.messenger());
    //     vm.mockCall(
    //         messenger,
    //         abi.encodeCall(ICrossDomainMessenger.xDomainMessageSender, ()),
    //         abi.encode(address(l1StandardBridgeCGT.OTHER_BRIDGE()))
    //     );
    //     vm.deal(messenger, 100);
    //     vm.prank(messenger);
    //     vm.expectRevert("StandardBridge: amount sent does not match amount required");
    //     l1StandardBridgeCGT.finalizeBridgeETH{ value: 50 }(alice, alice, 100, hex"");
    // }

    // /// @dev Tests that finalizing bridged ETH reverts if the destination is the L1 bridge.
    // function test_finalizeBridgeETH_sendToSelf_reverts() external {
    //     address messenger = address(l1StandardBridgeCGT.messenger());
    //     vm.mockCall(
    //         messenger,
    //         abi.encodeCall(ICrossDomainMessenger.xDomainMessageSender, ()),
    //         abi.encode(address(l1StandardBridgeCGT.OTHER_BRIDGE()))
    //     );
    //     vm.deal(messenger, 100);
    //     vm.prank(messenger);
    //     vm.expectRevert("StandardBridge: cannot send to self");
    //     l1StandardBridgeCGT.finalizeBridgeETH{ value: 100 }(alice, address(l1StandardBridgeCGT), 100, hex"");
    // }

    // /// @dev Tests that finalizing bridged ETH reverts if the destination is the messenger.
    // function test_finalizeBridgeETH_sendToMessenger_reverts() external {
    //     address messenger = address(l1StandardBridgeCGT.messenger());
    //     vm.mockCall(
    //         messenger,
    //         abi.encodeCall(ICrossDomainMessenger.xDomainMessageSender, ()),
    //         abi.encode(address(l1StandardBridgeCGT.OTHER_BRIDGE()))
    //     );
    //     vm.deal(messenger, 100);
    //     vm.prank(messenger);
    //     vm.expectRevert("StandardBridge: cannot send to messenger");
    //     l1StandardBridgeCGT.finalizeBridgeETH{ value: 100 }(alice, messenger, 100, hex"");
    // }
}
